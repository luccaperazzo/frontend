import React, { useEffect, useState } from "react";
import Layout from "../../layout/js/Layout";
import "../css/BusquedaEntrenadores.css"; // Aseg√∫rate de tener este CSS para estilos
import { useNavigate } from "react-router-dom";

// Listado de categor√≠as disponibles para filtrar
const categorias = ['Entrenamiento', 'Nutrici√≥n', 'Consultor√≠a'];

// Listado de zonas/barrio para filtrar entrenadores
const zonas = [
  "Almagro", "Balvanera", "Barracas", "Belgrano", "Boedo",
  "Caballito", "Chacarita", "Coghlan", "Colegiales", "Constituci√≥n",
  "Flores", "Floresta", "La Boca", "La Paternal", "Liniers", "Mataderos",
  "Monserrat", "Monte Castro", "Nueva Pompeya", "N√∫√±ez", "Palermo",
  "Parque Avellaneda", "Parque Chacabuco", "Parque Chas", "Parque Patricios",
  "Puerto Madero", "Recoleta", "Retiro", "Saavedra", "San Crist√≥bal",
  "San Nicol√°s", "San Telmo", "V√©lez Sarsfield", "Versalles", "Villa Crespo",
  "Villa del Parque", "Villa Devoto", "Villa Gral. Mitre", "Villa Lugano",
  "Villa Luro", "Villa Ort√∫zar", "Villa Pueyrred√≥n", "Villa Real",
  "Villa Riachuelo", "Villa Santa Rita", "Villa Soldati", "Villa Urquiza"
];

// Idiomas disponibles para filtrar entrenadores
const idiomas = [
  { value: "Espa√±ol", label: "Espa√±ol" },
  { value: "Ingl√©s", label: "Ingl√©s" },
  { value: "Portugu√©s", label: "Portugu√©s" }
];

// Duraciones posibles de los servicios (en minutos)
const duraciones = [30, 45, 60, 90];

// Opciones de rating para el filtro
const ratings = [1, 2, 3, 4, 5];

// Cantidad de entrenadores por p√°gina (paginaci√≥n)
const PAGE_SIZE = 6;

/**
 * Componente principal para la b√∫squeda y filtrado de entrenadores.
 * Permite aplicar filtros, ver resultados paginados y navegar al perfil de cada entrenador.
 */
const BusquedaEntrenadores = () => {
  // Estado para los filtros aplicados
  const [filtros, setFiltros] = useState({
    categoria: "",
    presencial: "",
    precioMax: "",
    duracion: "",
    zona: "",
    idioma: [],
    rating: "",
  });

  // Estado para la lista de entrenadores obtenidos del backend
  const [entrenadores, setEntrenadores] = useState([]);

  // Estado para mostrar indicador de carga
  const [loading, setLoading] = useState(false);

  // Estado para la p√°gina actual de la paginaci√≥n
  const [currentPage, setCurrentPage] = useState(1);

  // Hook de navegaci√≥n de React Router
  const navigate = useNavigate();
  /**
   * Construye el query string para la API a partir de los filtros seleccionados.
   * Devuelve una cadena como "?categoria=Entrenamiento&zona=Palermo&..."
   */
  const buildQuery = () => {
    const params = [];
    for (let key in filtros) {
      const value = filtros[key];
      if (Array.isArray(value) && value.length) {
        // Solo para idioma: elimin√° duplicados
        if (key === "idioma") {
          const clean = [...new Set(value)];
          params.push(`${key}=${clean.join(",")}`);
        } else {
          params.push(`${key}=${value.join(",")}`);
        }
      } else if (value) {
        params.push(`${key}=${encodeURIComponent(value)}`);
      }
    }
    
    const queryString = params.length ? "?" + params.join("&") : "";
    
    // üîß LOG: Query string construida
    console.log('üîß CONSTRUYENDO QUERY:');
    console.log('  Filtros actuales:', filtros);
    console.log('  Par√°metros v√°lidos:', params);
    console.log('  Query string final:', queryString);
    
    return queryString;
  };
  /**
   * useEffect: Llama a la API para buscar entrenadores cada vez que cambian los filtros.
   * Actualiza el estado de entrenadores y loading.
   */
  useEffect(() => {
    const fetchEntrenadores = async () => {
      setLoading(true);
      
      // üéØ LOG: Filtros aplicados
      console.log('üéØ FILTROS APLICADOS:', filtros);
      
      const query = buildQuery();
      const url = "http://localhost:3001/api/service/trainers" + query;
      
      // üåê LOG: URL completa
      console.log('üåê URL LLAMADA:', url);
      
      const res = await fetch(url, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      });
      const data = await res.json();
      
      // üìä LOG: Respuesta completa del servidor
      console.log('üìä RESPUESTA DEL SERVIDOR:', data);
      
      // üîç LOG: Verificaci√≥n de filtros en los resultados
      if (data.entrenadores && data.entrenadores.length > 0) {
        console.log('üîç VERIFICANDO FILTROS EN RESULTADOS:');
        
        data.entrenadores.forEach((entrenador, index) => {
          console.log(`\n--- ENTRENADOR ${index + 1}: ${entrenador.nombre} ${entrenador.apellido} ---`);
          console.log('üìç Zona del entrenador:', entrenador.zona);
          console.log('üó£Ô∏è Idiomas del entrenador:', entrenador.idiomas);
          console.log('‚≠ê Rating del entrenador:', entrenador.avgRating);
            // Verificar servicios si existen
          if (entrenador.servicios && entrenador.servicios.length > 0) {
            console.log('üõ†Ô∏è SERVICIOS QUE CUMPLEN LOS FILTROS:');
            console.log(`  üìù NOTA: Solo se muestran servicios que YA pasaron el filtrado del backend`);
            entrenador.servicios.forEach((servicio, sIndex) => {
              console.log(`  Servicio ${sIndex + 1}: ${servicio.titulo}`);
              console.log(`    üìÇ Categor√≠a: ${servicio.categoria}`);
              console.log(`    üí∞ Precio: $${servicio.precio}`);
              console.log(`    ‚è±Ô∏è Duraci√≥n: ${servicio.duracion} min`);
              console.log(`    üè† Modalidad: ${servicio.presencial ? 'Presencial' : 'Virtual'}`);
              
              // Verificar si cumple filtros aplicados (doble verificaci√≥n)
              const cumpleFiltros = [];
              if (filtros.categoria && servicio.categoria !== filtros.categoria) {
                cumpleFiltros.push(`‚ùå Categor√≠a no coincide (esperado: ${filtros.categoria}, actual: ${servicio.categoria})`);
              }
              if (filtros.precioMax && servicio.precio > parseInt(filtros.precioMax)) {
                cumpleFiltros.push(`‚ùå Precio excede m√°ximo (esperado: ‚â§${filtros.precioMax}, actual: ${servicio.precio})`);
              }
              if (filtros.duracion && servicio.duracion !== parseInt(filtros.duracion)) {
                cumpleFiltros.push(`‚ùå Duraci√≥n no coincide (esperado: ${filtros.duracion}, actual: ${servicio.duracion})`);
              }
              if (filtros.presencial === 'presencial' && !servicio.presencial) {
                cumpleFiltros.push(`‚ùå Modalidad no coincide (esperado: Presencial, actual: Virtual)`);
              }
              if (filtros.presencial === 'virtual' && servicio.presencial) {
                cumpleFiltros.push(`‚ùå Modalidad no coincide (esperado: Virtual, actual: Presencial)`);
              }
              
              if (cumpleFiltros.length === 0) {
                console.log(`    ‚úÖ CORRECTO: Cumple todos los filtros (como deber√≠a)`);
              } else {
                console.log(`    üö® ERROR DEL BACKEND: No deber√≠a estar aqu√≠ con estos problemas:`);
                cumpleFiltros.forEach(problema => console.log(`      ${problema}`));
              }
            });
          } else {
            console.log('‚úÖ CORRECTO: Sin servicios que cumplan los filtros aplicados');
            console.log('  üìù EXPLICACI√ìN: El backend filtr√≥ correctamente');
            console.log('  üìù El entrenador aparece porque cumple filtros b√°sicos (zona, idioma, rating)');
            console.log('  üìù Pero ninguno de sus servicios cumple los filtros de servicio aplicados');
          }
          
          // Verificar filtros del entrenador
          const problemasEntrenador = [];
          if (filtros.zona && entrenador.zona !== filtros.zona) {
            problemasEntrenador.push(`‚ùå Zona no coincide (esperado: ${filtros.zona}, actual: ${entrenador.zona})`);
          }
          if (filtros.rating && entrenador.avgRating < parseInt(filtros.rating)) {
            problemasEntrenador.push(`‚ùå Rating insuficiente (esperado: ‚â•${filtros.rating}, actual: ${entrenador.avgRating})`);
          }
          if (filtros.idioma && filtros.idioma.length > 0) {
            const tieneIdiomas = filtros.idioma.some(idioma => entrenador.idiomas?.includes(idioma));
            if (!tieneIdiomas) {
              problemasEntrenador.push(`‚ùå No habla idiomas requeridos (esperado: ${filtros.idioma.join(', ')}, actual: ${entrenador.idiomas?.join(', ')})`);
            }
          }
          
          if (problemasEntrenador.length === 0) {
            console.log('‚úÖ ENTRENADOR CUMPLE FILTROS B√ÅSICOS');
          } else {
            console.log('‚ö†Ô∏è PROBLEMAS CON FILTROS DEL ENTRENADOR:');
            problemasEntrenador.forEach(problema => console.log(`  ${problema}`));
          }
        });
      } else {
        console.log('‚ùå NO SE ENCONTRARON ENTRENADORES');
        console.log('ü§î Posibles razones:');
        console.log('  - Los filtros son muy restrictivos');
        console.log('  - No hay datos en la base');
        console.log('  - Problema con el backend');
      }
      
      setEntrenadores(data.entrenadores || []);
      setLoading(false);
    };
    fetchEntrenadores();
    // eslint-disable-next-line
  }, [JSON.stringify(filtros)]);

  /**
   * useEffect: Cuando cambian los filtros, resetea la p√°gina actual a 1.
   */
  useEffect(() => {
    setCurrentPage(1);
  }, [JSON.stringify(filtros)]);

  // C√°lculo de la cantidad total de p√°ginas seg√∫n los resultados
  const totalPages = Math.ceil(entrenadores.length / PAGE_SIZE);

  // Entrenadores a mostrar en la p√°gina actual
  const paginatedEntrenadores = entrenadores.slice(
    (currentPage - 1) * PAGE_SIZE,
    currentPage * PAGE_SIZE
  );

  /**
   * Handler para cambios en los filtros.
   * Actualiza el estado de filtros seg√∫n el input modificado.
   */
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (type === "checkbox") {
      setFiltros(prev => ({
        ...prev,
        idioma: checked
          ? [...prev.idioma, value]
          : prev.idioma.filter(idioma => idioma !== value),
      }));
    } else {
      setFiltros(prev => ({
        ...prev,
        [name]: value,
      }));
    }
  };

  /**
   * Limpia todos los filtros y los resetea a su valor inicial.
   */
  const limpiarFiltros = () => {
    setFiltros({
      categoria: "",
      presencial: "",
      precioMax: "",
      duracion: "",
      zona: "",
      idioma: [],
      rating: "",
    });
  };

  return (
    <Layout>
      <div className="busqueda-root">
        {/* Panel lateral de filtros */}
        <aside className="busqueda-filtros">
          <h2>Filtros</h2>

          {/* Filtro de categor√≠a */}
          <label>Categor√≠a</label>
          <select name="categoria" value={filtros.categoria} onChange={handleChange}>
            <option value="">Todas</option> {/* No tiene ning√∫n valor*/}
            {categorias.map(cat => <option key={cat} value={cat}>{cat}</option>)} {/* Se mapean las labels de categoria y se les asigna el valor correspondiente que es el mismo valor de su nombre */}
          </select>

          {/* Filtro de modalidad */}
          <label>Modalidad</label>
          <select name="presencial" value={filtros.presencial} onChange={handleChange}>
            <option value="">Ambas</option> {/* No tiene ning√∫n valor */}
            <option value="presencial">Presencial</option>
            <option value="virtual">Virtual</option>
          </select>

          {/* Filtro de precio m√°ximo */}
          <label>Precio m√°ximo</label>
          <input name="precioMax" type="number" min="0" value={filtros.precioMax} onChange={handleChange} />

          {/* Filtro de duraci√≥n */}
          <label>Duraci√≥n (min)</label>
          <select name="duracion" value={filtros.duracion} onChange={handleChange}>
            <option value="">Cualquiera</option>
            {/* Se mapean las duraciones y se les asigna el valor correspondiente que es el mismo a su nombre */}
            {duraciones.map(d => (
              <option key={d} value={d}>{d}</option> 
            ))}
          </select>

          {/* Filtro de zona */}
          <label>Zona</label>
          <select name="zona" value={filtros.zona} onChange={handleChange}>
            <option value="">Todas</option> {/* No tiene ning√∫n valor */}
              {/* Se mapean las zonas y se les asigna el valor correspondiente que es el mismo a su nombre */}
            {zonas.map(z => <option key={z} value={z}>{z}</option>)}
          </select>

          {/* Filtro de rating promedio */}
          <label>Promedio de rating</label>
          <select name="rating" value={filtros.rating || ""} onChange={handleChange}>
            <option value="">Cualquiera</option> {/* No tiene ning√∫n valor */}
            {/* Se mapean los ratings y se les asigna el valor correspondiente que es el mismo a su nombre */}
            {ratings.slice(0, -1).map(r => (
              <option key={r} value={String(r)}>{r}+</option>
            ))}
            <option value="5+">5+</option>
          </select>

          {/* Filtro de idiomas */}
          <label>Idiomas</label>
          <div className="busqueda-idiomas">
            {idiomas.map(({ value, label }) => (
              <label key={value}>
                <input
                  type="checkbox"
                  name="idioma"
                  value={value}
                  checked={filtros.idioma.includes(value)}
                  onChange={handleChange}
                />{" "}
                {label}
              </label>
            ))}
          </div>

          {/* Bot√≥n para limpiar todos los filtros */}
          <button className="filtros-reset" type="button" onClick={limpiarFiltros}>Limpiar</button>
        </aside>

        {/* Secci√≥n principal de resultados */}
        <main className="busqueda-resultados">
          <h2>Entrenadores encontrados</h2>
          {/* Indicador de carga */}
          {loading && <div className="busqueda-loading">Cargando...</div>}
          {/* Mensaje si no hay resultados */}
          {!loading && entrenadores.length === 0 && (
            <div className="busqueda-vacio">No hay entrenadores para los filtros seleccionados.</div>
          )}
          {/* Cards de entrenadores */}          <div className="busqueda-cards">
            {paginatedEntrenadores.map((e, idx) => (
              <div className="trainer-card" key={e._id || idx}>
                {/* Imagen circular del entrenador o iniciales */}
                {e.avatarUrl ? (
                  <img
                    src={
                      e.avatarUrl.startsWith("http") 
                        ? e.avatarUrl 
                        : `http://localhost:3001${e.avatarUrl}`
                    }
                    alt={`${e.nombre} ${e.apellido}`}
                    className="trainer-avatar"
                    style={{
                      width: 90,
                      height: 90,
                      borderRadius: "50%",
                      objectFit: "cover",
                      margin: "0 auto 12px auto",
                      display: "block"
                    }}
                  />
                ) : (
                  <div
                    className="trainer-avatar"
                    style={{
                      width: 90,
                      height: 90,
                      borderRadius: "50%",
                      margin: "0 auto 12px auto",
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center",
                      background: "#f6c94822",
                      color: "#222",
                      fontWeight: 700,
                      fontSize: 28,
                      letterSpacing: 1,
                    }}
                  >
                    {(e.nombre?.charAt(0) || "") + (e.apellido?.charAt(0) || "")}
                  </div>
                )}
                {/* Nombre y apellido */}
                <div className="trainer-name" style={{ fontWeight: 700, fontSize: "1.2rem", marginBottom: 2 }}>
                  {e.nombre} {e.apellido}
                </div>
                {/* Rating promedio y cantidad de ratings */}
                {typeof e.avgRating === "number" && (
                  <div
                    style={{
                      color: "#f6c948",
                      fontSize: 16,
                      fontWeight: 600,
                      margin: "3px 0"
                    }}
                  >
                    ‚òÖ {e.avgRating.toFixed(1)}{" "}
                    <span style={{ fontWeight: 400, color: "#555" }}>
                      ({e.totalRatings})
                    </span>
                  </div>
                )}
                {/* Zona del entrenador */}
                <div className="trainer-zona" style={{ color: "#888", fontSize: 14, marginBottom: 2 }}>
                  {e.zona}
                </div>
                {/* Idiomas del entrenador */}
                <div className="trainer-idiomas" style={{ color: "#666", fontSize: 13, marginBottom: 5 }}>
                  {e.idiomas?.join(" / ")}
                </div>
                {/* Bot√≥n para ver el perfil del entrenador */}
                <button
                  className="ver-perfil-btn"
                  onClick={() => {
                    if (!localStorage.getItem("token")) {
                      window.location.href = "/login";
                    } else {
                      navigate(`/trainers/${e._id}`); //le pasas el ID del trainer implicitamente en la URL
                    }
                  }}
                  style={{
                    width: "100%",
                    background: "#222",
                    color: "#fff",
                    fontWeight: 700,
                    fontSize: "1.08rem",
                    borderRadius: 7,
                    border: "none",
                    padding: "9px 0",
                    marginTop: 9,
                    cursor: "pointer",
                    transition: "background 0.14s"
                  }}
                >
                  Ver perfil
                </button>
                {/* Fin del bot√≥n Ver perfil */}
              </div>
            ))}
          </div>
          {/* Barra de paginaci√≥n */}
          {totalPages > 1 && (
            <div style={{ display: "flex", justifyContent: "center", marginTop: 24, gap: 12 }}>
              <button
                onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                disabled={currentPage === 1}
                style={{
                  padding: "8px 18px",
                  borderRadius: 6,
                  border: "1px solid #ccc",
                  background: currentPage === 1 ? "#f4f4f4" : "#fff",
                  color: "#333",
                  cursor: currentPage === 1 ? "not-allowed" : "pointer",
                  fontWeight: 600
                }}
              >
                Anterior
              </button>
              <span style={{ alignSelf: "center", fontWeight: 500 }}>
                P√°gina {currentPage} de {totalPages}
              </span>
              <button
                onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                disabled={currentPage === totalPages}
                style={{
                  padding: "8px 18px",
                  borderRadius: 6,
                  border: "1px solid #ccc",
                  background: currentPage === totalPages ? "#f4f4f4" : "#fff",
                  color: "#333",
                  cursor: currentPage === totalPages ? "not-allowed" : "pointer",
                  fontWeight: 600
                }}
              >
                Siguiente
              </button>
            </div>
          )}
        </main>
      </div>
    </Layout>
  );
};

export default BusquedaEntrenadores;
